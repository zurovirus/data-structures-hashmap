using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assignment_4
{
    /// <summary>
    /// The StringKey class.
    /// </summary>
    public class StringKey : IComparable<StringKey>
    {
        public string KeyName { get; private set; }

        /// <summary>
        /// Initializes an instance of the StringKey class with a name.
        /// </summary>
        /// <param name="KeyName">The StringKey name.</param>
        public StringKey(String KeyName)
        {
            this.KeyName = KeyName;
        }

        /// <summary>
        /// Overrides the Equals method and returns true if the name of the stringkeys match.
        /// </summary>
        /// <param name="obj">The StringKey to be equated.</param>
        /// <returns>The boolean value of the comparison.</returns>
        public override bool Equals(object obj)
        {
            if (obj == null) return false;

            if (obj.GetType() != typeof(StringKey)) return false;

            StringKey comparedStringKey = (StringKey)obj;

            return this.KeyName == comparedStringKey.KeyName;
        }

        /// <summary>
        /// Compares two StringKeys.
        /// </summary>
        /// <param name="other">The StringKey to be compared.</param>
        /// <returns>The value of the comparson.</returns>
        public int CompareTo(StringKey other)
        {
            return this.KeyName.CompareTo(other.KeyName);
        }

        /// <summary>
        /// The ToString Method of the class.
        /// </summary>
        /// <returns>The formatted ToString.</returns>
        public override string ToString()
        {
            return $"KeyName: {KeyName} HashCode: {GetHashCode()}";
        }

        /// <summary>
        /// Overrides the GetHashCode method and returns a hashcode generated by a polynomial.
        /// </summary>
        /// <returns>The hashcode of the StringKey.</returns>
        public override int GetHashCode()
        {
            const int coefficient = 31;
            int hash = 0;

            char[] charStrings = KeyName.ToCharArray(0, KeyName.Length);

            for (int i = 0; i < charStrings.Length; i++)
            {
                hash += (int)charStrings[i] * (int)Math.Pow(coefficient, i);
            }

            return Math.Abs(hash);
        }
    }
}
